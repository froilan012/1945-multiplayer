var express = require("express");
var app = express();
const server = app.listen(1337);
const io = require('socket.io')(server);

let enemies = [];
let players = [];

var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: true}));
app.use(express.static(__dirname + "/static"));

class Bullet {
    constructor(posX, posY, power, xMove) {
        this.power = power;
        this.xMove = xMove;
        this.posX = posX+18;
        this.posY = posY-50;
        this.outline = '<img src="../image/bullet.png" style="height: 50px;"></img>';
        this.bulletHealth = 1;
        this.bulletMove();
    }

    bulletMove() {
        setInterval(() => {
            if(this.bulletHealth > 0) {
                this.posY -= 15;
                this.posX += this.xMove;
            }
        }, 5);
    }
}

class Player {
    constructor(id, name) {
        this.id = id;
        this.name = name;
        this.outline =  "<svg viewBox='71.752 74.449 50 50' width='50' height='50'>" + 
                            "<path style='paint-order: fill; fill-rule: nonzero; stroke-width: 0px; stroke: rgb(177, 210, 69); fill: rgb(89, 53, 146);' d='M 184.657 487.793 C 183.813 486.837 183.664 486.457 183.977 486.059 C 184.269 485.688 189.724 481.052 189.877 481.044 C 189.941 481.041 190.016 481.193 190.045 481.382 L 190.098 481.727 L 191.151 481.086 L 192.203 480.446 L 192.203 479.193 L 192.203 477.939 L 188.66 477.939 C 185.344 477.939 184.909 477.965 181.858 478.341 C 180.066 478.562 178.456 478.743 178.282 478.743 C 178.063 478.743 177.506 478.279 176.487 477.248 C 175.076 475.82 175.012 475.728 175.048 475.179 C 175.087 474.607 175.091 474.603 177.119 473.26 C 178.237 472.52 181.065 470.624 183.404 469.047 L 187.656 466.18 L 187.656 465.402 C 187.656 464.788 187.603 464.625 187.404 464.625 C 187.108 464.625 187.067 464.269 187.341 464.082 C 187.445 464.011 187.587 463.558 187.656 463.075 C 187.8 462.078 188.051 461.771 188.324 462.26 C 188.42 462.433 188.499 462.815 188.499 463.111 C 188.5 463.407 188.614 463.797 188.752 463.978 C 189.03 464.341 189.079 464.625 188.864 464.625 C 188.788 464.625 188.759 464.783 188.801 464.978 C 188.909 465.481 189.142 465.243 189.204 464.567 C 189.262 463.925 189.564 463.789 189.646 464.369 C 189.704 464.776 190.009 464.769 190.021 464.36 C 190.025 464.221 190.13 463.914 190.254 463.678 C 190.463 463.278 190.457 463.247 190.162 463.247 C 189.988 463.247 189.846 463.17 189.846 463.075 C 189.846 462.98 189.909 462.903 189.987 462.903 C 190.249 462.903 190.519 462.322 190.519 461.757 C 190.519 461.449 190.598 461.055 190.694 460.883 C 190.98 460.371 191.239 460.726 191.326 461.749 C 191.375 462.332 191.489 462.717 191.635 462.8 C 191.943 462.974 191.93 463.247 191.614 463.247 C 191.475 463.247 191.361 463.334 191.361 463.441 C 191.361 463.594 191.462 463.569 191.844 463.319 C 192.297 463.023 192.334 462.928 192.447 461.777 C 192.749 460.491 193.156 458.417 193.706 457.415 C 193.969 456.98 194.045 456.51 194.103 454.97 C 194.143 453.921 194.229 453.004 194.294 452.933 C 194.368 452.851 194.975 452.802 195.918 452.802 L 197.424 452.802 L 197.424 450.778 L 197.424 446.561 C 197.424 445.182 197.517 444.306 197.775 443.271 C 198.304 441.147 199.552 438.46 199.935 438.621 C 200.183 438.725 201.266 441.048 201.736 442.483 C 202.087 443.557 202.181 444.207 202.257 446.107 L 202.307 450.744 L 202.307 452.802 L 203.878 452.802 L 205.449 452.802 C 205.79 453.68 205.84 454.066 205.844 454.859 C 205.844 456.042 205.91 457.029 206.19 457.576 C 206.672 458.518 207.147 460.098 207.377 461.526 C 207.498 462.271 207.669 462.807 207.828 462.931 C 208.067 463.118 208.108 463.108 208.479 462.765 C 208.79 462.478 208.876 462.249 208.881 461.704 C 208.884 461.322 208.987 460.886 209.108 460.737 L 209.33 460.464 L 209.437 460.737 C 209.496 460.886 209.545 461.325 209.546 461.711 C 209.548 462.237 209.633 462.486 209.885 462.705 C 210.307 463.07 210.314 463.247 209.905 463.247 C 209.617 463.247 209.606 463.283 209.79 463.647 C 209.901 463.867 210.043 464.082 210.107 464.125 C 210.17 464.168 210.229 464.311 210.237 464.443 C 210.248 464.604 210.304 464.56 210.412 464.305 C 210.625 463.801 210.896 463.944 210.896 464.56 C 210.896 465.18 211.322 465.505 211.436 464.972 C 211.487 464.734 211.44 464.625 211.288 464.625 C 210.987 464.625 211.004 464.305 211.317 464.092 C 211.484 463.978 211.569 463.692 211.569 463.246 C 211.569 462.45 211.826 461.884 212.102 462.072 C 212.203 462.141 212.343 462.598 212.413 463.087 C 212.501 463.697 212.627 464.02 212.813 464.113 C 213.198 464.304 213.157 464.625 212.748 464.625 C 212.447 464.625 212.411 464.701 212.411 465.345 L 212.411 466.065 L 217.169 469.278 C 219.785 471.045 222.627 472.948 223.484 473.508 L 225.041 474.525 L 225.041 475.136 C 225.041 475.709 224.957 475.834 223.706 477.11 C 222.971 477.859 222.258 478.535 222.122 478.612 C 221.923 478.725 221.191 478.66 218.449 478.288 C 215.094 477.834 214.95 477.824 211.444 477.824 L 207.865 477.824 L 207.865 479.124 L 207.865 480.424 L 208.959 481.083 L 210.054 481.742 L 210.054 481.38 C 210.054 481.182 210.122 481.036 210.204 481.057 C 210.287 481.078 211.658 482.203 213.251 483.556 C 215.198 485.209 216.174 486.131 216.228 486.368 C 216.289 486.635 216.153 486.892 215.665 487.436 C 214.736 488.47 214.517 488.614 213.887 488.61 C 213.585 488.608 211.959 488.408 210.273 488.166 C 207.226 487.728 207.208 487.726 207.158 487.969 C 207.123 488.136 206.721 487.728 205.873 486.662 C 204.557 485.009 204.328 484.776 204.328 485.09 C 204.328 485.259 204.128 485.285 202.83 485.285 C 201.172 485.285 201.231 485.314 201.035 484.423 C 200.898 483.798 200.725 483.911 200.55 484.74 C 200.449 485.215 200.383 485.285 200.034 485.285 C 199.685 485.285 199.619 485.215 199.518 484.74 C 199.342 483.911 199.17 483.798 199.032 484.423 C 198.837 485.313 198.895 485.285 197.25 485.285 C 195.969 485.285 195.756 485.257 195.707 485.084 C 195.673 484.966 195.1 485.566 194.308 486.548 C 193.517 487.53 192.943 488.13 192.91 488.011 C 192.878 487.901 192.776 487.81 192.684 487.81 C 192.591 487.81 191.228 487.991 189.654 488.212 C 188.08 488.433 186.475 488.614 186.087 488.614 C 185.392 488.614 185.37 488.602 184.657 487.793 Z M 208.875 463.419 C 208.875 463.325 208.752 463.247 208.602 463.247 C 208.378 463.247 208.366 463.278 208.538 463.419 C 208.653 463.514 208.776 463.592 208.811 463.592 C 208.846 463.592 208.875 463.514 208.875 463.419 Z' id='path4147' transform='matrix(1, 0, 0, 1, -103.28894, -364.164642)'></path>" +
                        "</svg>";
        this.iniPosX = 350;
        this.iniPosY = 650;
        this.bullets = [];
        this.directionLeft = false; 
        this.directionRight = false;
        this.directionUp = false;
        this.directionDown = false;
        this.fire = false;
        this.bulletCount = 10000;
        this.health = 1000;
        this.reloadStatus = false;
        this.power = 3;
        setInterval(() => {
            this.playerMove();
        }, 5);
        setInterval(() => {
            if (this.fire && this.bulletCount > 0 && this.health > 0 && !this.reloadStatus) {
                this.bulletCount--;
                this.createBullet();
            }
        }, 150);
    }

    playerMove() {
        if (this.directionRight && this.iniPosX < 650 && this.health > 0) {
            this.iniPosX += 5;
        }
        if (this.directionLeft && this.iniPosX > 0 && this.health > 0) {
            this.iniPosX -= 5;
        }
        if (this.directionUp && this.iniPosY > 50 && this.health > 0) {
            this.iniPosY -= 5;
        }
        if (this.directionDown && this.iniPosY < 650 && this.health > 0) {
            this.iniPosY += 5;
        }
    }

    createBullet() {
        if (this.health > 0 && this.power == 1) {
            this.bullets.push(new Bullet(this.iniPosX, this.iniPosY, this.power, 0));
        }
        else if (this.health > 0 && this.power == 2) {
            this.bullets.push(new Bullet(this.iniPosX-15, this.iniPosY, this.power, 0));
            this.bullets.push(new Bullet(this.iniPosX+15, this.iniPosY, this.power, 0));
        }
        else if (this.health > 0 && this.power == 3) {
            this.bullets.push(new Bullet(this.iniPosX, this.iniPosY, this.power, 0));
            this.bullets.push(new Bullet(this.iniPosX-15, this.iniPosY, this.power, -5));
            this.bullets.push(new Bullet(this.iniPosX+15, this.iniPosY, this.power, 5));
        }
    }
}

class Enemy {
    constructor() {
        this.enemyPosx = Math.floor(650 * Math.random());
        this.enemyPosy = -25;
        this.outline =  '<svg viewBox="0 0 70.71 70.71" width="50px" height="50px">' + 
                            '<path style="fill: rgba(255, 0, 0, 0.93);" id="path13" d="M 50.138 20.571 C 50.326 20.761 50.308 21.001 49.659 22.405 C 49.582 22.569 49.156 23.175 49.156 23.175 C 49.156 23.175 49.442 23.49 49.52 23.568 C 49.67 23.719 49.739 24.057 49.678 24.322 C 49.488 25.142 47.195 28.424 45.911 29.707 C 45.114 30.506 44.703 31.05 44.732 31.27 C 44.756 31.457 45.058 32.261 45.403 33.053 C 46.012 34.451 46.24 34.725 53.11 42.371 C 58.55 48.424 60.215 50.377 60.313 50.821 C 60.587 52.046 59.526 53.184 56.786 54.608 L 55.372 55.339 C 55.372 55.339 34.753 40.577 34.753 40.577 L 22.392 49.967 L 22.675 50.469 C 22.831 50.746 24.123 52.358 25.546 54.05 C 26.969 55.743 28.149 57.289 28.168 57.488 C 28.241 58.28 25.068 60.772 24.592 60.295 C 23.841 59.544 20.688 57.139 20.423 57.114 C 20.233 57.094 17.523 55.029 16.603 54.108 C 15.682 53.187 13.616 50.478 13.598 50.288 C 13.572 50.023 11.167 46.869 10.415 46.119 C 9.939 45.642 12.431 42.469 13.224 42.544 C 13.421 42.561 14.967 43.741 16.66 45.164 C 18.354 46.588 19.965 47.88 20.24 48.036 L 20.744 48.318 L 30.133 35.958 C 30.133 35.958 15.371 15.339 15.371 15.339 L 16.104 13.924 C 17.526 11.184 18.665 10.123 19.891 10.397 C 20.333 10.497 22.286 12.16 28.34 17.602 C 35.985 24.47 36.26 24.698 37.658 25.307 C 38.45 25.653 39.254 25.954 39.441 25.979 C 39.662 26.007 40.206 25.597 41.003 24.799 C 42.287 23.515 45.568 21.221 46.39 21.032 C 46.655 20.97 46.992 21.04 47.143 21.191 C 47.22 21.269 47.531 21.551 47.531 21.551 C 47.531 21.551 48.137 21.124 48.302 21.046 C 49.705 20.398 49.95 20.384 50.138 20.571 Z" transform="matrix(-0.707106, 0.707107, -0.707107, -0.707106, 85.354546, 35.355305)"></path>' +
                        '</svg>';
        this.enemyHealth = 1;
        this.move();
        this.swing();
        setInterval(() => {
            this.enemyMove = Math.ceil(3 * Math.random());
        }, 500);
        this.speed = 3 + Math.ceil(3 * Math.random());
    }

    move() {
        setInterval(() => {
            if(this.enemyHealth > 0) {
                this.enemyPosy += this.speed;
            }
        }, 10);
    }

    swing() {
        setInterval(() => {
            if(this.enemyMove == 1 && this.enemyPosx < 650 && this.enemyHealth > 0) {
                this.enemyPosx += 5;
            }
            if(this.enemyMove == 2 && this.enemyPosx > 0 && this.enemyHealth > 0) {
                this.enemyPosx -= 5;
            }
        }, 10);
    }
}

io.on('connection', function (socket) {

    socket.on('moveRight', (data) => {
        let player = players.findIndex(player => player.id === data.id)
        players[player].directionRight = data.moveRight;

    })

    socket.on('moveLeft', (data) => {
        let player = players.findIndex(player => player.id === data.id)
        players[player].directionLeft = data.moveLeft;

    })

    socket.on('moveUp', (data) => {
        let player = players.findIndex(player => player.id === data.id)
        players[player].directionUp = data.moveUp;

    })

    socket.on('moveDown', (data) => {
        let player = players.findIndex(player => player.id === data.id)
        players[player].directionDown = data.moveDown;

    })

    socket.on('fire', (data) => {
        let player = players.findIndex(player => player.id === data.id)
        players[player].fire = data.fire;
    })

    socket.on('reload', (data) => {
        let player = players.findIndex(player => player.id === data.id)
        players[player].reloadStatus = true;
        
        players[player].outline =   "<svg viewBox='71.752 74.449 50 50' width='50' height='50'>" + 
                                        "<path style='paint-order: fill; fill-rule: nonzero; stroke-width: 0px; stroke: rgb(177, 210, 69); fill: rgb(89, 53, 146);' d='M 184.657 487.793 C 183.813 486.837 183.664 486.457 183.977 486.059 C 184.269 485.688 189.724 481.052 189.877 481.044 C 189.941 481.041 190.016 481.193 190.045 481.382 L 190.098 481.727 L 191.151 481.086 L 192.203 480.446 L 192.203 479.193 L 192.203 477.939 L 188.66 477.939 C 185.344 477.939 184.909 477.965 181.858 478.341 C 180.066 478.562 178.456 478.743 178.282 478.743 C 178.063 478.743 177.506 478.279 176.487 477.248 C 175.076 475.82 175.012 475.728 175.048 475.179 C 175.087 474.607 175.091 474.603 177.119 473.26 C 178.237 472.52 181.065 470.624 183.404 469.047 L 187.656 466.18 L 187.656 465.402 C 187.656 464.788 187.603 464.625 187.404 464.625 C 187.108 464.625 187.067 464.269 187.341 464.082 C 187.445 464.011 187.587 463.558 187.656 463.075 C 187.8 462.078 188.051 461.771 188.324 462.26 C 188.42 462.433 188.499 462.815 188.499 463.111 C 188.5 463.407 188.614 463.797 188.752 463.978 C 189.03 464.341 189.079 464.625 188.864 464.625 C 188.788 464.625 188.759 464.783 188.801 464.978 C 188.909 465.481 189.142 465.243 189.204 464.567 C 189.262 463.925 189.564 463.789 189.646 464.369 C 189.704 464.776 190.009 464.769 190.021 464.36 C 190.025 464.221 190.13 463.914 190.254 463.678 C 190.463 463.278 190.457 463.247 190.162 463.247 C 189.988 463.247 189.846 463.17 189.846 463.075 C 189.846 462.98 189.909 462.903 189.987 462.903 C 190.249 462.903 190.519 462.322 190.519 461.757 C 190.519 461.449 190.598 461.055 190.694 460.883 C 190.98 460.371 191.239 460.726 191.326 461.749 C 191.375 462.332 191.489 462.717 191.635 462.8 C 191.943 462.974 191.93 463.247 191.614 463.247 C 191.475 463.247 191.361 463.334 191.361 463.441 C 191.361 463.594 191.462 463.569 191.844 463.319 C 192.297 463.023 192.334 462.928 192.447 461.777 C 192.749 460.491 193.156 458.417 193.706 457.415 C 193.969 456.98 194.045 456.51 194.103 454.97 C 194.143 453.921 194.229 453.004 194.294 452.933 C 194.368 452.851 194.975 452.802 195.918 452.802 L 197.424 452.802 L 197.424 450.778 L 197.424 446.561 C 197.424 445.182 197.517 444.306 197.775 443.271 C 198.304 441.147 199.552 438.46 199.935 438.621 C 200.183 438.725 201.266 441.048 201.736 442.483 C 202.087 443.557 202.181 444.207 202.257 446.107 L 202.307 450.744 L 202.307 452.802 L 203.878 452.802 L 205.449 452.802 C 205.79 453.68 205.84 454.066 205.844 454.859 C 205.844 456.042 205.91 457.029 206.19 457.576 C 206.672 458.518 207.147 460.098 207.377 461.526 C 207.498 462.271 207.669 462.807 207.828 462.931 C 208.067 463.118 208.108 463.108 208.479 462.765 C 208.79 462.478 208.876 462.249 208.881 461.704 C 208.884 461.322 208.987 460.886 209.108 460.737 L 209.33 460.464 L 209.437 460.737 C 209.496 460.886 209.545 461.325 209.546 461.711 C 209.548 462.237 209.633 462.486 209.885 462.705 C 210.307 463.07 210.314 463.247 209.905 463.247 C 209.617 463.247 209.606 463.283 209.79 463.647 C 209.901 463.867 210.043 464.082 210.107 464.125 C 210.17 464.168 210.229 464.311 210.237 464.443 C 210.248 464.604 210.304 464.56 210.412 464.305 C 210.625 463.801 210.896 463.944 210.896 464.56 C 210.896 465.18 211.322 465.505 211.436 464.972 C 211.487 464.734 211.44 464.625 211.288 464.625 C 210.987 464.625 211.004 464.305 211.317 464.092 C 211.484 463.978 211.569 463.692 211.569 463.246 C 211.569 462.45 211.826 461.884 212.102 462.072 C 212.203 462.141 212.343 462.598 212.413 463.087 C 212.501 463.697 212.627 464.02 212.813 464.113 C 213.198 464.304 213.157 464.625 212.748 464.625 C 212.447 464.625 212.411 464.701 212.411 465.345 L 212.411 466.065 L 217.169 469.278 C 219.785 471.045 222.627 472.948 223.484 473.508 L 225.041 474.525 L 225.041 475.136 C 225.041 475.709 224.957 475.834 223.706 477.11 C 222.971 477.859 222.258 478.535 222.122 478.612 C 221.923 478.725 221.191 478.66 218.449 478.288 C 215.094 477.834 214.95 477.824 211.444 477.824 L 207.865 477.824 L 207.865 479.124 L 207.865 480.424 L 208.959 481.083 L 210.054 481.742 L 210.054 481.38 C 210.054 481.182 210.122 481.036 210.204 481.057 C 210.287 481.078 211.658 482.203 213.251 483.556 C 215.198 485.209 216.174 486.131 216.228 486.368 C 216.289 486.635 216.153 486.892 215.665 487.436 C 214.736 488.47 214.517 488.614 213.887 488.61 C 213.585 488.608 211.959 488.408 210.273 488.166 C 207.226 487.728 207.208 487.726 207.158 487.969 C 207.123 488.136 206.721 487.728 205.873 486.662 C 204.557 485.009 204.328 484.776 204.328 485.09 C 204.328 485.259 204.128 485.285 202.83 485.285 C 201.172 485.285 201.231 485.314 201.035 484.423 C 200.898 483.798 200.725 483.911 200.55 484.74 C 200.449 485.215 200.383 485.285 200.034 485.285 C 199.685 485.285 199.619 485.215 199.518 484.74 C 199.342 483.911 199.17 483.798 199.032 484.423 C 198.837 485.313 198.895 485.285 197.25 485.285 C 195.969 485.285 195.756 485.257 195.707 485.084 C 195.673 484.966 195.1 485.566 194.308 486.548 C 193.517 487.53 192.943 488.13 192.91 488.011 C 192.878 487.901 192.776 487.81 192.684 487.81 C 192.591 487.81 191.228 487.991 189.654 488.212 C 188.08 488.433 186.475 488.614 186.087 488.614 C 185.392 488.614 185.37 488.602 184.657 487.793 Z M 208.875 463.419 C 208.875 463.325 208.752 463.247 208.602 463.247 C 208.378 463.247 208.366 463.278 208.538 463.419 C 208.653 463.514 208.776 463.592 208.811 463.592 C 208.846 463.592 208.875 463.514 208.875 463.419 Z' id='path4147' transform='matrix(1, 0, 0, 1, -103.28894, -364.164642)'></path>" +
                                    "</svg>"+"<div class='reload'>RELOADING</div>";
        
        if(players[player].reloadStatus) {
            
            setTimeout(() => {
                players[player].bulletCount = 10;
                players[player].outline =   "<svg viewBox='71.752 74.449 50 50' width='50' height='50'>" + 
                                                "<path style='paint-order: fill; fill-rule: nonzero; stroke-width: 0px; stroke: rgb(177, 210, 69); fill: rgb(89, 53, 146);' d='M 184.657 487.793 C 183.813 486.837 183.664 486.457 183.977 486.059 C 184.269 485.688 189.724 481.052 189.877 481.044 C 189.941 481.041 190.016 481.193 190.045 481.382 L 190.098 481.727 L 191.151 481.086 L 192.203 480.446 L 192.203 479.193 L 192.203 477.939 L 188.66 477.939 C 185.344 477.939 184.909 477.965 181.858 478.341 C 180.066 478.562 178.456 478.743 178.282 478.743 C 178.063 478.743 177.506 478.279 176.487 477.248 C 175.076 475.82 175.012 475.728 175.048 475.179 C 175.087 474.607 175.091 474.603 177.119 473.26 C 178.237 472.52 181.065 470.624 183.404 469.047 L 187.656 466.18 L 187.656 465.402 C 187.656 464.788 187.603 464.625 187.404 464.625 C 187.108 464.625 187.067 464.269 187.341 464.082 C 187.445 464.011 187.587 463.558 187.656 463.075 C 187.8 462.078 188.051 461.771 188.324 462.26 C 188.42 462.433 188.499 462.815 188.499 463.111 C 188.5 463.407 188.614 463.797 188.752 463.978 C 189.03 464.341 189.079 464.625 188.864 464.625 C 188.788 464.625 188.759 464.783 188.801 464.978 C 188.909 465.481 189.142 465.243 189.204 464.567 C 189.262 463.925 189.564 463.789 189.646 464.369 C 189.704 464.776 190.009 464.769 190.021 464.36 C 190.025 464.221 190.13 463.914 190.254 463.678 C 190.463 463.278 190.457 463.247 190.162 463.247 C 189.988 463.247 189.846 463.17 189.846 463.075 C 189.846 462.98 189.909 462.903 189.987 462.903 C 190.249 462.903 190.519 462.322 190.519 461.757 C 190.519 461.449 190.598 461.055 190.694 460.883 C 190.98 460.371 191.239 460.726 191.326 461.749 C 191.375 462.332 191.489 462.717 191.635 462.8 C 191.943 462.974 191.93 463.247 191.614 463.247 C 191.475 463.247 191.361 463.334 191.361 463.441 C 191.361 463.594 191.462 463.569 191.844 463.319 C 192.297 463.023 192.334 462.928 192.447 461.777 C 192.749 460.491 193.156 458.417 193.706 457.415 C 193.969 456.98 194.045 456.51 194.103 454.97 C 194.143 453.921 194.229 453.004 194.294 452.933 C 194.368 452.851 194.975 452.802 195.918 452.802 L 197.424 452.802 L 197.424 450.778 L 197.424 446.561 C 197.424 445.182 197.517 444.306 197.775 443.271 C 198.304 441.147 199.552 438.46 199.935 438.621 C 200.183 438.725 201.266 441.048 201.736 442.483 C 202.087 443.557 202.181 444.207 202.257 446.107 L 202.307 450.744 L 202.307 452.802 L 203.878 452.802 L 205.449 452.802 C 205.79 453.68 205.84 454.066 205.844 454.859 C 205.844 456.042 205.91 457.029 206.19 457.576 C 206.672 458.518 207.147 460.098 207.377 461.526 C 207.498 462.271 207.669 462.807 207.828 462.931 C 208.067 463.118 208.108 463.108 208.479 462.765 C 208.79 462.478 208.876 462.249 208.881 461.704 C 208.884 461.322 208.987 460.886 209.108 460.737 L 209.33 460.464 L 209.437 460.737 C 209.496 460.886 209.545 461.325 209.546 461.711 C 209.548 462.237 209.633 462.486 209.885 462.705 C 210.307 463.07 210.314 463.247 209.905 463.247 C 209.617 463.247 209.606 463.283 209.79 463.647 C 209.901 463.867 210.043 464.082 210.107 464.125 C 210.17 464.168 210.229 464.311 210.237 464.443 C 210.248 464.604 210.304 464.56 210.412 464.305 C 210.625 463.801 210.896 463.944 210.896 464.56 C 210.896 465.18 211.322 465.505 211.436 464.972 C 211.487 464.734 211.44 464.625 211.288 464.625 C 210.987 464.625 211.004 464.305 211.317 464.092 C 211.484 463.978 211.569 463.692 211.569 463.246 C 211.569 462.45 211.826 461.884 212.102 462.072 C 212.203 462.141 212.343 462.598 212.413 463.087 C 212.501 463.697 212.627 464.02 212.813 464.113 C 213.198 464.304 213.157 464.625 212.748 464.625 C 212.447 464.625 212.411 464.701 212.411 465.345 L 212.411 466.065 L 217.169 469.278 C 219.785 471.045 222.627 472.948 223.484 473.508 L 225.041 474.525 L 225.041 475.136 C 225.041 475.709 224.957 475.834 223.706 477.11 C 222.971 477.859 222.258 478.535 222.122 478.612 C 221.923 478.725 221.191 478.66 218.449 478.288 C 215.094 477.834 214.95 477.824 211.444 477.824 L 207.865 477.824 L 207.865 479.124 L 207.865 480.424 L 208.959 481.083 L 210.054 481.742 L 210.054 481.38 C 210.054 481.182 210.122 481.036 210.204 481.057 C 210.287 481.078 211.658 482.203 213.251 483.556 C 215.198 485.209 216.174 486.131 216.228 486.368 C 216.289 486.635 216.153 486.892 215.665 487.436 C 214.736 488.47 214.517 488.614 213.887 488.61 C 213.585 488.608 211.959 488.408 210.273 488.166 C 207.226 487.728 207.208 487.726 207.158 487.969 C 207.123 488.136 206.721 487.728 205.873 486.662 C 204.557 485.009 204.328 484.776 204.328 485.09 C 204.328 485.259 204.128 485.285 202.83 485.285 C 201.172 485.285 201.231 485.314 201.035 484.423 C 200.898 483.798 200.725 483.911 200.55 484.74 C 200.449 485.215 200.383 485.285 200.034 485.285 C 199.685 485.285 199.619 485.215 199.518 484.74 C 199.342 483.911 199.17 483.798 199.032 484.423 C 198.837 485.313 198.895 485.285 197.25 485.285 C 195.969 485.285 195.756 485.257 195.707 485.084 C 195.673 484.966 195.1 485.566 194.308 486.548 C 193.517 487.53 192.943 488.13 192.91 488.011 C 192.878 487.901 192.776 487.81 192.684 487.81 C 192.591 487.81 191.228 487.991 189.654 488.212 C 188.08 488.433 186.475 488.614 186.087 488.614 C 185.392 488.614 185.37 488.602 184.657 487.793 Z M 208.875 463.419 C 208.875 463.325 208.752 463.247 208.602 463.247 C 208.378 463.247 208.366 463.278 208.538 463.419 C 208.653 463.514 208.776 463.592 208.811 463.592 C 208.846 463.592 208.875 463.514 208.875 463.419 Z' id='path4147' transform='matrix(1, 0, 0, 1, -103.28894, -364.164642)'></path>" +
                                            "</svg>";
                players[player].reloadStatus = false;
            }, 1000);
        }
    })

    socket.on('got_a_new_player', function(data) {
        players.push(new Player(socket.id, data.name));
        io.emit('updatePlayers', {
            players: players
        })

        io.emit('reloadDiv', {
            players: players
        })
    });

    socket.on('disconnect', function() {
        players.splice(players.indexOf(socket.id))
    })

    
})

setInterval(() => {
    let count = Math.ceil(3 * Math.random());
    for(i=0; i<count; i++) {
        enemies.push(new Enemy);
    }
}, 500);

setInterval(() => {
    
    for(let i=0; i<players.length; i++) {
        for(let j=0; j<players[i].bullets.length; j++) {
            if(players[i].bullets[j].posY < 10) {
                players[i].bullets.splice(j, 1)
            }
            else if (players[i].bullets[j].posX < -5) {
                players[i].bullets.splice(j, 1)
            }
            else if (players[i].bullets[j].posX > 690) {
                players[i].bullets.splice(j, 1)
            }

            let enemy = enemies;
            let bullet = players[i].bullets;

            bullet.forEach((bulletElement) => {
                enemy.forEach((enemyElement) => {
                    if (bulletElement.posX >= enemyElement.enemyPosx - 50 && bulletElement.posX <= enemyElement.enemyPosx + 50 && bulletElement.posY <= enemyElement.enemyPosy && bulletElement.posY >= enemyElement.enemyPosy - 50) {
                        bullet[bullet.indexOf(bulletElement)].outline = '<img src="../image/explosion.gif?start=0" style="height: 50px;"></img>';
                        bullet[bullet.indexOf(bulletElement)].bulletHealth--;
                        bullet[bullet.indexOf(bulletElement)].posX = enemyElement.enemyPosx;
                        bullet[bullet.indexOf(bulletElement)].posY = enemyElement.enemyPosy;
                        enemies[enemies.indexOf(enemyElement)].enemyHealth--;
                        enemies.splice(enemies.indexOf(enemyElement), 1);
                        setTimeout(() => {
                            bullet.splice(bullet.indexOf(bulletElement), 1);
                        }, 400);
                    }
                })
            });
        }
    }

    for(let i=0; i<players.length; i++) {

            let enemy = enemies;
            let player = players;

            player.forEach((playerElement) => {
                enemy.forEach((enemyElement) => {
                    if (playerElement.iniPosX >= enemyElement.enemyPosx - 50 && playerElement.iniPosX <= enemyElement.enemyPosx + 50 && playerElement.iniPosY <= enemyElement.enemyPosy && playerElement.iniPosY >= enemyElement.enemyPosy - 50) {
                        players[player.indexOf(playerElement)].health -= 5;
                        if(players[player.indexOf(playerElement)].health == 0) {
                            players[player.indexOf(playerElement)].outline = "";
                            players[player.indexOf(playerElement)].iniPosY = 720;
                            players[player.indexOf(playerElement)].iniPosX = 0;
                        }
                        enemies.splice(enemies.indexOf(enemyElement), 1)
                    }
                })
            });
    }

    for(let i=0; i<enemies.length; i++) {
        if(enemies[i].enemyPosy > 660) {
            enemies.splice(i, 1);
        }
    }

    io.emit('updateAllContainer', {
        enemies: enemies,
        players: players
    })
}, 10);